#!/usr/bin/env python2.7
import itertools
import string
from hashlib import sha1
 
def main():

    # set things up
    hash = get_input('Please enter SMF SHA1 Hash: ', lambda x: len(x) == 40)
    username = raw_input('Please enter SMF username: ')
    choice = get_input(
        '1: Random BruteForce\n2: Dictionary BruteForce\n\n'+\
                'Enter 1 or 2 to make decision:', lambda x: x == '1' or x == '2')


    # attempt to crack the password
    if choice == '1':
        password = rand_bruteforce(username, hash)
    else:
        dict_bruteforce(username, hash)
    
    # display the results
    if password is not None:
        print 'Cracked.\nThe password is:', password,
    else:
        print 'Unable to crack password.'

def get_input(prompt, validator):

    while True:

        in_str = raw_input(prompt)
        if validator(in_str):
            return in_str

        
        print "Error: that's not a valid input."

def bruteforce(charset, min, max):
    return (''.join(candidate)
        for candidate in itertools.chain.from_iterable(itertools.product(
        charset, repeat=i) for i in range(min, max + 1)))

def rand_bruteforce(username, hash):

    charsets = {
        'all' : string.printable,
        'alnum' : string.letters + string.digits,
        'alpha' : string.letters,
        'lower' : string.lowercase,
        'upper' : string.uppercase,
        'digit' : string.digits,
        'symbols' : string.punctuation
    }

    max = raw_input('Please enter max length: ')
    min = raw_input('Please enter mix length: ')
    choice = get_input(
                'Please enter one of the bruteforce'+\
                    ' modes from the following list:\n'.join(charsets.keys())+'\n: ',
                        lambda x: x in charsets.keys())
    
  
    for attempt in bruteforce(charsets[choice], int(min), int(max)):
        print attempt
        param = username+attempt
        if sha1(param).hexdigest() == hash:
            return attempt
    return None

def dict_bruteforce(username, hash, dict=None):

    return None
            
if __name__ == '__main__':

    main()


